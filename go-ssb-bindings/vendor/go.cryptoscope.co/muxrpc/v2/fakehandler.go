// Code generated by counterfeiter. DO NOT EDIT.
package muxrpc

import (
	"context"
	"sync"
)

type FakeHandler struct {
	HandleCallStub        func(context.Context, *Request)
	handleCallMutex       sync.RWMutex
	handleCallArgsForCall []struct {
		arg1 context.Context
		arg2 *Request
	}
	HandleConnectStub        func(context.Context, Endpoint)
	handleConnectMutex       sync.RWMutex
	handleConnectArgsForCall []struct {
		arg1 context.Context
		arg2 Endpoint
	}
	HandledStub        func(Method) bool
	handledMutex       sync.RWMutex
	handledArgsForCall []struct {
		arg1 Method
	}
	handledReturns struct {
		result1 bool
	}
	handledReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) HandleCall(arg1 context.Context, arg2 *Request) {
	fake.handleCallMutex.Lock()
	fake.handleCallArgsForCall = append(fake.handleCallArgsForCall, struct {
		arg1 context.Context
		arg2 *Request
	}{arg1, arg2})
	stub := fake.HandleCallStub
	fake.recordInvocation("HandleCall", []interface{}{arg1, arg2})
	fake.handleCallMutex.Unlock()
	if stub != nil {
		fake.HandleCallStub(arg1, arg2)
	}
}

func (fake *FakeHandler) HandleCallCallCount() int {
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	return len(fake.handleCallArgsForCall)
}

func (fake *FakeHandler) HandleCallCalls(stub func(context.Context, *Request)) {
	fake.handleCallMutex.Lock()
	defer fake.handleCallMutex.Unlock()
	fake.HandleCallStub = stub
}

func (fake *FakeHandler) HandleCallArgsForCall(i int) (context.Context, *Request) {
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	argsForCall := fake.handleCallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHandler) HandleConnect(arg1 context.Context, arg2 Endpoint) {
	fake.handleConnectMutex.Lock()
	fake.handleConnectArgsForCall = append(fake.handleConnectArgsForCall, struct {
		arg1 context.Context
		arg2 Endpoint
	}{arg1, arg2})
	stub := fake.HandleConnectStub
	fake.recordInvocation("HandleConnect", []interface{}{arg1, arg2})
	fake.handleConnectMutex.Unlock()
	if stub != nil {
		fake.HandleConnectStub(arg1, arg2)
	}
}

func (fake *FakeHandler) HandleConnectCallCount() int {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	return len(fake.handleConnectArgsForCall)
}

func (fake *FakeHandler) HandleConnectCalls(stub func(context.Context, Endpoint)) {
	fake.handleConnectMutex.Lock()
	defer fake.handleConnectMutex.Unlock()
	fake.HandleConnectStub = stub
}

func (fake *FakeHandler) HandleConnectArgsForCall(i int) (context.Context, Endpoint) {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	argsForCall := fake.handleConnectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHandler) Handled(arg1 Method) bool {
	fake.handledMutex.Lock()
	ret, specificReturn := fake.handledReturnsOnCall[len(fake.handledArgsForCall)]
	fake.handledArgsForCall = append(fake.handledArgsForCall, struct {
		arg1 Method
	}{arg1})
	stub := fake.HandledStub
	fakeReturns := fake.handledReturns
	fake.recordInvocation("Handled", []interface{}{arg1})
	fake.handledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) HandledCallCount() int {
	fake.handledMutex.RLock()
	defer fake.handledMutex.RUnlock()
	return len(fake.handledArgsForCall)
}

func (fake *FakeHandler) HandledCalls(stub func(Method) bool) {
	fake.handledMutex.Lock()
	defer fake.handledMutex.Unlock()
	fake.HandledStub = stub
}

func (fake *FakeHandler) HandledArgsForCall(i int) Method {
	fake.handledMutex.RLock()
	defer fake.handledMutex.RUnlock()
	argsForCall := fake.handledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandler) HandledReturns(result1 bool) {
	fake.handledMutex.Lock()
	defer fake.handledMutex.Unlock()
	fake.HandledStub = nil
	fake.handledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHandler) HandledReturnsOnCall(i int, result1 bool) {
	fake.handledMutex.Lock()
	defer fake.handledMutex.Unlock()
	fake.HandledStub = nil
	if fake.handledReturnsOnCall == nil {
		fake.handledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.handledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleCallMutex.RLock()
	defer fake.handleCallMutex.RUnlock()
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	fake.handledMutex.RLock()
	defer fake.handledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Handler = new(FakeHandler)
